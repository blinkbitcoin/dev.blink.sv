"use strict";(self.webpackChunkdev_blink_sv=self.webpackChunkdev_blink_sv||[]).push([[2196],{661:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=i(4848),s=i(8453);const a={id:"authentication-examples",title:"API Authentication Examples",slug:"/api/authentication-examples"},r="API Authentication Examples",o={id:"api/authentication-examples",title:"API Authentication Examples",description:"This guide provides comprehensive examples of how to authenticate with the Blink API using the X-API-KEY header across different programming languages and tools.",source:"@site/docs/api/authentication-examples.md",sourceDirName:"api",slug:"/api/authentication-examples",permalink:"/api/authentication-examples",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"authentication-examples",title:"API Authentication Examples",slug:"/api/authentication-examples"}},l={},c=[{value:"Authentication Header",id:"authentication-header",level:2},{value:"Getting Your API Key",id:"getting-your-api-key",level:2},{value:"Authentication Examples",id:"authentication-examples",level:2},{value:"cURL",id:"curl",level:3},{value:"JavaScript (Fetch API)",id:"javascript-fetch-api",level:3},{value:"Python (Requests)",id:"python-requests",level:3},{value:"Node.js (Axios)",id:"nodejs-axios",level:3},{value:"WebSocket Connection",id:"websocket-connection",level:3},{value:"Authentication with Postman",id:"authentication-with-postman",level:2},{value:"Common Authentication Issues",id:"common-authentication-issues",level:2},{value:"Invalid API Key Format",id:"invalid-api-key-format",level:3},{value:"Missing or Incorrect Header",id:"missing-or-incorrect-header",level:3},{value:"Expired or Revoked API Key",id:"expired-or-revoked-api-key",level:3},{value:"Insufficient Permissions",id:"insufficient-permissions",level:3},{value:"Security Best Practices",id:"security-best-practices",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"api-authentication-examples",children:"API Authentication Examples"}),"\n",(0,t.jsxs)(n.p,{children:["This guide provides comprehensive examples of how to authenticate with the Blink API using the ",(0,t.jsx)(n.code,{children:"X-API-KEY"})," header across different programming languages and tools."]}),"\n",(0,t.jsx)(n.h2,{id:"authentication-header",children:"Authentication Header"}),"\n",(0,t.jsxs)(n.p,{children:["All authenticated API requests to Blink require the ",(0,t.jsx)(n.code,{children:"X-API-KEY"})," header with your API key:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"X-API-KEY: blink_your_api_key_here\n"})}),"\n",(0,t.jsx)(n.h2,{id:"getting-your-api-key",children:"Getting Your API Key"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Log in to the ",(0,t.jsx)(n.a,{href:"https://dashboard.blink.sv",children:"Blink Dashboard"})]}),"\n",(0,t.jsx)(n.li,{children:"Navigate to the API Keys section in the left menu"}),"\n",(0,t.jsx)(n.li,{children:"Create a new API key with the appropriate scopes"}),"\n",(0,t.jsx)(n.li,{children:"Copy and securely store your API key"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"authentication-examples",children:"Authentication Examples"}),"\n",(0,t.jsx)(n.h3,{id:"curl",children:"cURL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl --request POST \\\n  --url 'https://api.blink.sv/graphql' \\\n  --header 'Content-Type: application/json' \\\n  --header 'X-API-KEY: blink_your_api_key_here' \\\n  --data '{\"query\":\"query me { me { defaultAccount { wallets { id walletCurrency }}}}\"}' \n"})}),"\n",(0,t.jsx)(n.h3,{id:"javascript-fetch-api",children:"JavaScript (Fetch API)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const fetchWalletData = async (apiKey) => {\n  try {\n    const response = await fetch('https://api.blink.sv/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-API-KEY': apiKey\n      },\n      body: JSON.stringify({\n        query: `\n          query me {\n            me {\n              defaultAccount {\n                wallets {\n                  id\n                  walletCurrency\n                }\n              }\n            }\n          }\n        `\n      })\n    });\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching wallet data:', error);\n    throw error;\n  }\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"python-requests",children:"Python (Requests)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import requests\n\ndef get_wallet_data(api_key):\n    url = "https://api.blink.sv/graphql"\n    \n    headers = {\n        "Content-Type": "application/json",\n        "X-API-KEY": api_key\n    }\n    \n    query = """\n    query me {\n      me {\n        defaultAccount {\n          wallets {\n            id\n            walletCurrency\n          }\n        }\n      }\n    }\n    """\n    \n    payload = {"query": query}\n    \n    response = requests.post(url, json=payload, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        raise Exception(f"Query failed with status code {response.status_code}: {response.text}")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"nodejs-axios",children:"Node.js (Axios)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const axios = require('axios');\n\nasync function getWalletData(apiKey) {\n  try {\n    const response = await axios({\n      url: 'https://api.blink.sv/graphql',\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-API-KEY': apiKey\n      },\n      data: {\n        query: `\n          query me {\n            me {\n              defaultAccount {\n                wallets {\n                  id\n                  walletCurrency\n                }\n              }\n            }\n          }\n        `\n      }\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error fetching wallet data:', error);\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"websocket-connection",children:"WebSocket Connection"}),"\n",(0,t.jsx)(n.p,{children:"For WebSocket connections, the API key is included in the connection initialization payload:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Using a WebSocket client\nconst ws = new WebSocket('wss://ws.blink.sv/graphql', 'graphql-transport-ws');\n\n// Connection initialization with API key\nws.onopen = () => {\n  ws.send(JSON.stringify({\n    type: 'connection_init',\n    payload: {\n      'X-API-KEY': 'blink_your_api_key_here'\n    }\n  }));\n};\n\n// Handle connection acknowledgment\nws.onmessage = (event) => {\n  const message = JSON.parse(event.data);\n  \n  if (message.type === 'connection_ack') {\n    console.log('Connection established successfully');\n    \n    // Subscribe to updates after connection is established\n    ws.send(JSON.stringify({\n      id: '1',\n      type: 'subscribe',\n      payload: {\n        query: `\n          subscription {\n            myUpdates {\n              update {\n                ... on LnUpdate {\n                  transaction {\n                    initiationVia {\n                      ... on InitiationViaLn {\n                        paymentHash\n                      }\n                    }\n                    direction\n                  }\n                }\n              }\n            }\n          }\n        `\n      }\n    }));\n  }\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"authentication-with-postman",children:"Authentication with Postman"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a new request to ",(0,t.jsx)(n.code,{children:"https://api.blink.sv/graphql"})]}),"\n",(0,t.jsxs)(n.li,{children:["Set the method to ",(0,t.jsx)(n.code,{children:"POST"})]}),"\n",(0,t.jsxs)(n.li,{children:["In the Headers tab, add:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Content-Type: application/json"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"X-API-KEY: blink_your_api_key_here"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:['In the Body tab, select "raw" and "JSON", then enter your GraphQL query:',"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "query": "query me { me { defaultAccount { wallets { id walletCurrency }}}}"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-authentication-issues",children:"Common Authentication Issues"}),"\n",(0,t.jsx)(n.h3,{id:"invalid-api-key-format",children:"Invalid API Key Format"}),"\n",(0,t.jsxs)(n.p,{children:["Ensure your API key starts with ",(0,t.jsx)(n.code,{children:"blink_"})," and is correctly copied from the dashboard."]}),"\n",(0,t.jsx)(n.h3,{id:"missing-or-incorrect-header",children:"Missing or Incorrect Header"}),"\n",(0,t.jsxs)(n.p,{children:["The header name must be exactly ",(0,t.jsx)(n.code,{children:"X-API-KEY"})," (case-sensitive)."]}),"\n",(0,t.jsx)(n.h3,{id:"expired-or-revoked-api-key",children:"Expired or Revoked API Key"}),"\n",(0,t.jsx)(n.p,{children:"If your API key has been revoked or expired, you'll need to generate a new one from the dashboard."}),"\n",(0,t.jsx)(n.h3,{id:"insufficient-permissions",children:"Insufficient Permissions"}),"\n",(0,t.jsx)(n.p,{children:"Make sure your API key has the appropriate scopes for the operations you're trying to perform:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Read"})," for queries"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Receive"})," for creating invoices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Write"})," for sending payments and modifying data"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Never expose your API key in client-side code"})," that will be visible to users"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Store API keys securely"})," in environment variables or secure key management systems"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use the minimum required scopes"})," for your application"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rotate API keys periodically"})," for enhanced security"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Revoke unused API keys"})," from the dashboard"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(6540);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);