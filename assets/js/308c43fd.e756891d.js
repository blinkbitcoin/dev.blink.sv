"use strict";(self.webpackChunkdev_blink_sv=self.webpackChunkdev_blink_sv||[]).push([[8896],{5477:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var s=r(4848),t=r(8453);const o={id:"errors",title:"Error Handling",slug:"/api/errors"},a=void 0,i={id:"api/errors",title:"Error Handling",description:"Each API call provides an HTTP status code offering insights about the outcome of the request.",source:"@site/docs/api/error-handling.md",sourceDirName:"api",slug:"/api/errors",permalink:"/api/errors",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"errors",title:"Error Handling",slug:"/api/errors"},sidebar:"apiSidebar",previous:{title:"Proof of Payment",permalink:"/api/proof-of-payment"},next:{title:"Postman Collection",permalink:"/api/postman"}},d={},l=[{value:"200 OK",id:"200-ok",level:2},{value:"Sample query",id:"sample-query",level:2},{value:"Sample response",id:"sample-response",level:2},{value:"4xx and 500 status codes",id:"4xx-and-500-status-codes",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Each API call provides an HTTP status code offering insights about the outcome of the request."}),"\n",(0,s.jsx)(n.h2,{id:"200-ok",children:"200 OK"}),"\n",(0,s.jsx)(n.p,{children:"The status codes of GraphQL HTTP differ from those of REST API. Notably, a 200 Successful code can be returned by the GraphQL API even in situations where REST would usually give a 4xx or 5xx error. If GraphQL can process the request, it will return a 200 status code with details about the success and/or errors."}),"\n",(0,s.jsx)(n.p,{children:"A typical response from a GraphQl API is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"{\n  data: { /* a JSON object with the requested data */ },\n  errors: [ /* an optional array of the errors that happened during the execution of the request */ ],\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Each field of the GraphQL request is resolved independently and returns information if requested."}),"\n",(0,s.jsx)(n.h2,{id:"sample-query",children:"Sample query"}),"\n",(0,s.jsx)(n.p,{children:"Combining a non-authorized and an authorized field in the same query."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"query me {\n  globals {\n    network\n  }\n  me {\n    email {\n      address\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"sample-response",children:"Sample response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "globals": {\n      "network": "signet"\n    },\n    "me": null\n  },\n  "errors": [\n    {\n      "message": "Not authorized",\n      "locations": [\n        {\n          "line": 1,\n          "column": 36\n        }\n      ],\n      "path": [\n        "me"\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In the example above, we were unable to resolve the ",(0,s.jsx)(n.code,{children:"me.email.address"})," field but we got the ",(0,s.jsx)(n.code,{children:"globals.network"}),". Can see both the successful and the error messages in the same response."]}),"\n",(0,s.jsx)(n.h2,{id:"4xx-and-500-status-codes",children:"4xx and 500 status codes"}),"\n",(0,s.jsx)(n.p,{children:"Those errors occur before the request hits the Blink API. They may be related to network issues, account issues, malformed requests or Blink internal issues. Some examples below:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Code"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"400"})," Bad Request"]}),(0,s.jsxs)(n.td,{children:["Often a malformed GraphQL request (for example, forgot to include the ",(0,s.jsx)(n.code,{children:"query"})," field in the payload)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"401"})," Authorization Required"]}),(0,s.jsx)(n.td,{children:"The authentication token is not valid and you are not authorized to send the request."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"429"})," Too Many Requests"]}),(0,s.jsx)(n.td,{children:"There were too requests sent from your account or IP address in a short period of time and was rate limited."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"500"})," Internal Server Error"]}),(0,s.jsx)(n.td,{children:"An error occurred on the Blink API server side, we will investigate as soon as possible."})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var s=r(6540);const t={},o=s.createContext(t);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);