"use strict";(self.webpackChunkdev_blink_sv=self.webpackChunkdev_blink_sv||[]).push([[5501],{2443:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=a(4848),s=a(8453);const i={id:"llm-api-reference",title:"API Reference for LLMs",slug:"/api/llm-api-reference"},r="GraphQL API Reference for LLM Agents",o={id:"api/llm-api-reference",title:"API Reference for LLMs",description:"This page provides access to machine-readable formats of the Blink GraphQL API schema, specifically designed for consumption by Large Language Models (LLMs) and AI agents.",source:"@site/docs/api/llm-api-reference.md",sourceDirName:"api",slug:"/api/llm-api-reference",permalink:"/api/llm-api-reference",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"llm-api-reference",title:"API Reference for LLMs",slug:"/api/llm-api-reference"},sidebar:"apiSidebar",previous:{title:"Postman Collection",permalink:"/api/postman"},next:{title:"Blink Voucher",permalink:"/examples/blink-voucher"}},l={},c=[{value:"Why Use Machine-Readable API References?",id:"why-use-machine-readable-api-references",level:2},{value:"Recommended Formats for LLMs",id:"recommended-formats-for-llms",level:2},{value:"Enhanced JSON Schema (Recommended)",id:"enhanced-json-schema-recommended",level:3},{value:"OpenAPI Format (Alternative)",id:"openapi-format-alternative",level:3},{value:"How to Use with LLM Agents",id:"how-to-use-with-llm-agents",level:2},{value:"Using with LangChain",id:"using-with-langchain",level:3},{value:"Using with OpenAI Assistants",id:"using-with-openai-assistants",level:3},{value:"Generating Updated Schemas",id:"generating-updated-schemas",level:2},{value:"Recommended Format by Use Case",id:"recommended-format-by-use-case",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"graphql-api-reference-for-llm-agents",children:"GraphQL API Reference for LLM Agents"}),"\n",(0,t.jsx)(n.p,{children:"This page provides access to machine-readable formats of the Blink GraphQL API schema, specifically designed for consumption by Large Language Models (LLMs) and AI agents."}),"\n",(0,t.jsx)(n.h2,{id:"why-use-machine-readable-api-references",children:"Why Use Machine-Readable API References?"}),"\n",(0,t.jsx)(n.p,{children:"When building applications that use AI agents or LLMs to interact with the Blink API, providing structured API documentation in formats that are optimized for machine consumption offers several advantages:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Improved Understanding"}),": LLMs can better understand the API structure, available operations, and data types"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"More Accurate Code Generation"}),": AI agents can generate more accurate API calls with proper parameters"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Better Error Handling"}),": Understanding the API schema helps LLMs suggest appropriate error handling strategies"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reduced Hallucinations"}),': Structured documentation reduces the chance of LLMs "hallucinating" non-existent API features']}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"recommended-formats-for-llms",children:"Recommended Formats for LLMs"}),"\n",(0,t.jsx)(n.p,{children:"We provide the following machine-readable formats of the Blink GraphQL API schema, optimized for LLM consumption:"}),"\n",(0,t.jsx)(n.h3,{id:"enhanced-json-schema-recommended",children:"Enhanced JSON Schema (Recommended)"}),"\n",(0,t.jsx)(n.p,{children:"This is our recommended format for most LLM applications. It provides a clean, structured representation of the GraphQL schema with additional context:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("a",{href:"/reference/graphql-api-for-llm.json",download:!0,children:"Download Enhanced LLM-Friendly Schema (JSON)"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"openapi-format-alternative",children:"OpenAPI Format (Alternative)"}),"\n",(0,t.jsx)(n.p,{children:"For systems that work better with OpenAPI specifications:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("a",{href:"/reference/graphql-openapi.json",download:!0,children:"Download OpenAPI Specification (JSON)"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"how-to-use-with-llm-agents",children:"How to Use with LLM Agents"}),"\n",(0,t.jsx)(n.p,{children:"Here are some examples of how to use these formats with popular LLM frameworks:"}),"\n",(0,t.jsx)(n.h3,{id:"using-with-langchain",children:"Using with LangChain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from langchain.agents import Tool\nfrom langchain.agents import initialize_agent\nfrom langchain.llms import OpenAI\nimport requests\nimport json\n\n# Load the API schema\napi_schema_url = "https://dev.blink.sv/reference/graphql-api-for-llm.json"\napi_schema = json.loads(requests.get(api_schema_url).text)\n\n# Create a tool that provides the API schema as context\ntools = [\n    Tool(\n        name="BlinkAPI",\n        func=lambda _: "API schema is already provided in your context",\n        description="Blink GraphQL API schema information"\n    )\n]\n\n# Initialize the agent with the API schema in its context\nllm = OpenAI(temperature=0)\nagent = initialize_agent(tools, llm, agent="zero-shot-react-description", verbose=True)\n\n# Use the agent with the API schema as context\nagent.run(\n    input="How do I create a lightning invoice using the Blink API?",\n    context={"api_schema": api_schema}\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"using-with-openai-assistants",children:"Using with OpenAI Assistants"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const { OpenAI } = require('openai');\nconst fs = require('fs');\nconst path = require('path');\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nasync function createAssistantWithBlinkAPI() {\n  // Download the API schema\n  const response = await fetch('https://dev.blink.sv/reference/graphql-api-for-llm.json');\n  const apiSchema = await response.json();\n\n  // Save it to a file\n  fs.writeFileSync('blink-api-schema.json', JSON.stringify(apiSchema));\n\n  // Create an assistant with the API schema as a file\n  const assistant = await openai.beta.assistants.create({\n    name: \"Blink API Assistant\",\n    instructions: \"You are an assistant that helps users interact with the Blink GraphQL API. Use the provided API schema to answer questions and generate code examples.\",\n    model: \"gpt-4-turbo\",\n    tools: [{ type: \"code_interpreter\" }],\n    file_ids: [\n      // Upload the API schema file to OpenAI and get its file ID\n      await openai.files.create({\n        file: fs.createReadStream(path.resolve('blink-api-schema.json')),\n        purpose: 'assistants',\n      }).then(file => file.id)\n    ]\n  });\n\n  console.log(\"Assistant created with ID:\", assistant.id);\n  return assistant;\n}\n\ncreateAssistantWithBlinkAPI();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"generating-updated-schemas",children:"Generating Updated Schemas"}),"\n",(0,t.jsx)(n.p,{children:"The API reference files are automatically updated when the GraphQL schema changes. If you need to generate them manually, you can use the following script:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Generate all formats\n./scripts/generate-api-reference-combined.sh\n"})}),"\n",(0,t.jsx)(n.h2,{id:"recommended-format-by-use-case",children:"Recommended Format by Use Case"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Use Case"}),(0,t.jsx)(n.th,{children:"Recommended Format"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Most LLM applications"}),(0,t.jsx)(n.td,{children:"Enhanced LLM-friendly JSON"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"OpenAI function calling"}),(0,t.jsx)(n.td,{children:"OpenAPI specification"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Code generation"}),(0,t.jsx)(n.td,{children:"Enhanced LLM-friendly JSON"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Automated API integration"}),(0,t.jsx)(n.td,{children:"OpenAPI specification"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/graphql-intro",children:"GraphQL Introduction"})," - Learn the basics of our GraphQL API"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/auth",children:"Authentication"})," - How to authenticate with the Blink API"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/postman",children:"Postman Collection"})," - Test the API interactively"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var t=a(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);